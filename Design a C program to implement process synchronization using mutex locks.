#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>

#define NUM_THREADS 5

pthread_mutex_t lock;

void* threadFunction(void* threadid) {
    long tid = (long)threadid;
    pthread_mutex_lock(&lock);
    
    printf("Thread %ld is in the critical section.\n", tid);
    
    // Simulate some work in the critical section
    sleep(1);
    
    printf("Thread %ld is leaving the critical section.\n", tid);
    pthread_mutex_unlock(&lock);
    
    pthread_exit(NULL);
}

int main() {
    pthread_t threads[NUM_THREADS];
    pthread_mutex_init(&lock, NULL);
    
    for (long i = 0; i < NUM_THREADS; i++) {
        pthread_create(&threads[i], NULL, threadFunction, (void*)i);
    }
    
    for (int i = 0; i < NUM_THREADS; i++) {
        pthread_join(threads[i], NULL);
    }
    
    pthread_mutex_destroy(&lock);
    return 0;
}
